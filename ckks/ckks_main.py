import numpy as np
from .ckks import CKKSCiphertext
from .constants import CKKSCryptographicParameters
from .factories import CKKSCiphertextFactory, CKKSKeyFactory

# Cria√ß√£o da inst√¢ncia global dos par√¢metros
crypto_params = CKKSCryptographicParameters()

# Cria√ß√£o das factories
ciphertext_factory = CKKSCiphertextFactory(crypto_params)
key_factory = CKKSKeyFactory(crypto_params)


# --- FUN√á√ÉO DE LOG PARA DEPURA√á√ÉO ---
def log_poly(name, poly, q_mod=None):
    """Imprime um resumo de um polin√¥mio para depura√ß√£o."""
    # Garante que os coeficientes sejam um array numpy para as opera√ß√µes
    coeffs = np.array(poly.coef, dtype=np.int64)
    print(f"--- LOG: {name} ---")
    print(f"    Primeiros 8 coefs: {coeffs[:8]}")
    print(f"    Max coef: {np.max(coeffs)}")
    print(f"    Min coef: {np.min(coeffs)}")
    if q_mod:
        # Norma L-infinito: maior valor absoluto ap√≥s o centered lift
        centered_coeffs = np.where(coeffs > q_mod // 2, coeffs - q_mod, coeffs)
        linf_norm = np.max(np.abs(centered_coeffs))
        print(f"    Norma L-infinito (vs q={q_mod}): {linf_norm}")
    print("-" * 20)


# --- Demonstra√ß√£o de Uso ---
if __name__ == "__main__":
    print(
        f"Par√¢metros: N={crypto_params.POLYNOMIAL_DEGREE}, "
        f"DELTA‚âà2^{int(np.log2(crypto_params.SCALING_FACTOR))}, "
        f"Q_CHAIN de ~{crypto_params.MODULUS_CHAIN[0].bit_length()}"
    )
    print("-" * 50)

    # Gera chaves usando a factory
    keyset = key_factory.generate_full_keyset()
    sk = keyset["secret_key"]
    pk = keyset["public_key"]
    rlk = keyset["relinearization_key"]

    print("Chaves geradas usando CKKSKeyFactory.")
    print("-" * 50)

    num_plaintext_elements = crypto_params.get_maximum_plaintext_slots()
    m1 = np.array([1, 1, 1, 1] + [0] * (num_plaintext_elements - 4))
    m2 = np.array([0.5, -0.6, 0.7, 0.8] + [0] * (num_plaintext_elements - 4))

    print(f"Texto claro m1 (primeiros 4): {m1[:4]}")
    print(f"Texto claro m2 (primeiros 4): {m2[:4]}")

    # Codifica e criptografa usando a factory
    ct1_obj = ciphertext_factory.encode_and_encrypt(m1, pk)
    ct2_obj = ciphertext_factory.encode_and_encrypt(m2, pk)

    print(f"N√≠vel inicial dos textos cifrados: {ct1_obj.level}")
    print("-" * 50)

    print("--- TESTE DE ADI√á√ÉO HOMOM√ìRFICA ---")
    poly_mod_ring = crypto_params.get_polynomial_modulus_ring()
    modulus_chain = crypto_params.MODULUS_CHAIN

    # Usa o m√©todo est√°tico da classe CKKSCiphertext
    ct_add_obj = CKKSCiphertext.add_homomorphic(ct1_obj, ct2_obj)

    # Usa a factory para decrypt/decode
    decoded_add_vector = ciphertext_factory.decrypt_and_decode(ct_add_obj, sk, len(m1))

    print(f"Resultado esperado (m1 + m2): {np.round(m1 + m2, 4)[:4]}")
    print(f"Resultado obtido (Adi√ß√£o):   {np.round(decoded_add_vector, 4)[:4]}")
    print("-" * 50)

    print("--- TESTE DE MULTIPLICA√á√ÉO HOMOM√ìRFICA ---")
    # Converte para formato dict para compatibilidade com fun√ß√µes existentes
    ct1 = ct1_obj.to_dict()
    ct2 = ct2_obj.to_dict()

    ct_mult_3part = raw_multiply_homomorphic(ct1, ct2, poly_mod_ring, modulus_chain)
    ct_mult_relin = relinearize(ct_mult_3part, rlk, poly_mod_ring, modulus_chain)

    # --- DIAGN√ìSTICO INTERMEDI√ÅRIO ---
    print("\n\n--- DIAGN√ìSTICO: Testando o resultado ANTES do rescale ---\n")
    scale_before_rescale = ct_mult_relin["scale"]
    q_level_before_rescale = modulus_chain[ct_mult_relin["level"]]

    ct_mult_relin_obj = CKKSCiphertext.from_dict(ct_mult_relin, crypto_params)
    decoded_vector_before_rescale = ciphertext_factory.decrypt_and_decode(
        ct_mult_relin_obj, sk, len(m1)
    )

    print(
        f"Escala esperada antes do rescale: {crypto_params.get_scaling_factor_squared()}"
    )
    print(f"Resultado esperado (m1*m2): {np.round(m1*m2, 4)[:8]}")
    print(f"Resultado obtido ANTES do rescale: {decoded_vector_before_rescale[:8]}")

    # Ajuste para compatibilidade de dimens√µes
    min_len = min(len(m1 * m2), len(decoded_vector_before_rescale))
    error_before = np.max(
        np.abs((m1 * m2)[:min_len] - decoded_vector_before_rescale[:min_len])
    )
    print(f"--> Erro m√°ximo ANTES do rescale: {error_before:.10f}\n")
    print("--- FIM DO DIAGN√ìSTICO ---\n\n")

    # --- CONTINUA√á√ÉO DO FLUXO NORMAL ---
    ct_mult_relin_obj = CKKSCiphertext.from_dict(ct_mult_relin, crypto_params)
    ct_mult_final_obj = CKKSCiphertext.rescale(ct_mult_relin_obj)

    print(f"Escala final √© {ct_mult_final_obj.scale:.4f}")
    print(f"N√≠vel final do texto cifrado: {ct_mult_final_obj.level}")

    decoded_mult_vector = ciphertext_factory.decrypt_and_decode(
        ct_mult_final_obj, sk, len(m1)
    )

    print(f"Resultado esperado (m1 * m2): {np.round(m1 * m2, 4)[:4]}")
    print(f"Resultado obtido (Multiplica√ß√£o): {np.round(decoded_mult_vector, 4)[:4]}")

    # Ajuste para compatibilidade de dimens√µes
    min_len = min(len(m1 * m2), len(decoded_mult_vector))
    error = np.max(np.abs((m1 * m2)[:min_len] - decoded_mult_vector[:min_len]))
    print(f"\nErro m√°ximo absoluto na multiplica√ß√£o: {error:.10f}")

    print("\n" + "=" * 70)
    print("=== EXEMPLO: SOMA E MULTIPLICA√á√ÉO DO MESMO TEXTO CIFRADO ===")
    print("=" * 70)

    # Criar um array de teste com valores mais simples para melhor visualiza√ß√£o
    test_array = np.array([2.0, 3.0, 4.0, 5.0] + [0.0] * (num_plaintext_elements - 4))
    print(f"Array original: {test_array[:4]}")

    # Criptografar o array
    ct_test = ciphertext_factory.encode_and_encrypt(test_array, pk)
    print(f"Array criptografado (level={ct_test.level}, scale={ct_test.scale:.2e})")

    # === OPERA√á√ÉO 1: SOMA HOMOM√ìRFICA (ct + ct) ===
    print("\n--- SOMA HOMOM√ìRFICA: ct + ct ---")
    ct_sum = CKKSCiphertext.add_homomorphic(ct_test, ct_test)

    # Decodificar resultado da soma
    result_sum = ciphertext_factory.decrypt_and_decode(ct_sum, sk, 4)
    expected_sum = test_array[:4] + test_array[:4]  # 2 * test_array

    print(f"Array esperado (2 * original): {expected_sum}")
    print(f"Array obtido (soma homom√≥rfica): {np.round(result_sum, 6)}")

    error_sum = np.max(np.abs(expected_sum - result_sum))
    print(f"Erro m√°ximo na soma: {error_sum:.2e}")

    # === OPERA√á√ÉO 2: MULTIPLICA√á√ÉO HOMOM√ìRFICA (ct * ct) ===
    print("\n--- MULTIPLICA√á√ÉO HOMOM√ìRFICA: ct * ct ---")

    # Usar o m√©todo completo com rescale autom√°tico
    ct_mult_complete = CKKSCiphertext.multiply_homomorphic(
        ct_test, ct_test, keyset["evaluation_key"], auto_rescale=True
    )

    # Analisar escalas
    original_scale = ct_test.scale
    mult_scale = ct_mult_complete.scale

    print(f"Escala original: {original_scale:.2e}")
    print(f"Escala ap√≥s multiplica√ß√£o com rescale: {mult_scale:.2e}")
    print(f"N√≠vel original: {ct_test.level}")
    print(f"N√≠vel ap√≥s multiplica√ß√£o: {ct_mult_complete.level}")

    # Descriptografar resultado da multiplica√ß√£o
    result_mult = ciphertext_factory.decrypt_and_decode(ct_mult_complete, sk, 4)
    expected_mult = test_array[:4] * test_array[:4]  # test_array¬≤

    print(f"\nResultados da multiplica√ß√£o:")
    print(f"  Esperado: {expected_mult}")
    print(f"  Obtido: {np.round(result_mult, 6)}")

    error_mult = np.max(np.abs(expected_mult - result_mult))
    print(f"  Erro m√°ximo: {error_mult:.6f}")

    # Verificar se a precis√£o est√° dentro do requisito (0.001)
    precision_target = 0.001
    if error_mult < precision_target:
        precision_status = f"‚úÖ PRECIS√ÉO ALCAN√áADA (< {precision_target})"
    else:
        precision_status = f"‚ö†Ô∏è PRECIS√ÉO INSUFICIENTE (‚â• {precision_target})"

    print(f"  {precision_status}")
    # === DEMONSTRA√á√ÉO DE PRESERVA√á√ÉO DAS OPERA√á√ïES ===
    print("\n--- VERIFICA√á√ÉO DAS PROPRIEDADES HOMOM√ìRFICAS ---")
    print("‚úÖ Soma homom√≥rfica: Enc(a) + Enc(a) = Enc(2a)")
    print(f"  Original: {test_array[:4]}")
    print(f"  2 √ó Original: {2 * test_array[:4]}")
    print(f"  Soma homom√≥rfica: {np.round(result_sum, 3)}")
    print(f"  Diferen√ßa: {np.round(2 * test_array[:4] - result_sum, 6)}")

    print("\nüîß Multiplica√ß√£o homom√≥rfica: Enc(a) √ó Enc(a) = Enc(a¬≤)")
    print(f"  Original: {test_array[:4]}")
    print(f"  Original¬≤: {test_array[:4]**2}")
    print(f"  Mult homom√≥rfica: {np.round(result_mult, 6)}")
    print(f"  Diferen√ßa: {np.round(test_array[:4]**2 - result_mult, 6)}")

    # === INFORMA√á√ïES T√âCNICAS ===
    print("\n--- INFORMA√á√ïES T√âCNICAS ---")
    print(f"Ciphertext original: level={ct_test.level}, size={ct_test.size}")
    print(f"Ap√≥s soma: level={ct_sum.level}, size={ct_sum.size}")
    print(
        f"Ap√≥s multiplica√ß√£o: level={ct_mult_complete.level}, size={ct_mult_complete.size}"
    )
    print(f"Rescale aplicado: {ct_test.level - ct_mult_complete.level} n√≠veis")

    print("\nGest√£o de escalas:")
    print(f"  Escala base: {original_scale:.2e}")
    print(f"  Escala ap√≥s mult: {mult_scale:.2e}")
    print(f"  Raz√£o de redu√ß√£o: {original_scale/mult_scale:.2f}")

    print("\n" + "=" * 70)
    if error_mult < precision_target:
        success_msg = "‚úÖ MULTIPLICA√á√ÉO CKKS IMPLEMENTADA COM SUCESSO!"
        precision_msg = f"Precis√£o alcan√ßada: {error_mult:.6f} < {precision_target}"
    else:
        success_msg = (
            "‚ö†Ô∏è MULTIPLICA√á√ÉO CKKS IMPLEMENTADA (ajuste de precis√£o necess√°rio)"
        )
        precision_msg = f"Precis√£o atual: {error_mult:.6f} ‚â• {precision_target}"

    print(success_msg)
    print(precision_msg)
    print("=" * 70)
